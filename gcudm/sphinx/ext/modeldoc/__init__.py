#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Created by pat on 4/9/18
"""
.. currentmodule:: __init__.py
.. moduleauthor:: Pat Daburu <pat@daburu.net>

Say something descriptive about the '__init__.py' module.
"""

from sphinx.ext.autodoc import (
    ClassLevelDocumenter, AttributeDocumenter, ClassDocumenter
)
from sphinx.util.inspect import object_description, getdoc
from sphinx.util.docstrings import prepare_docstring
from sphinx.ext.autodoc import SUPPRESS
from six import text_type
from sphinx.util import force_decode
from sqlalchemy.sql.schema import Column


from ....model import IS_MODEL_CLASS
from ....meta import COLUMN_META_ATTR, TABLE_META_ATTR
from ....docstrings import ModelRstFormatter
import uuid

model_rst_formatter = ModelRstFormatter()

__version__ = '0.0.1'  #: the version of this Sphinx extension


def setup(app):
    # type: (Sphinx) -> Dict[unicode, Any]
    app.add_autodocumenter(ModelClassDocumenter)
    app.add_autodocumenter(ColumnAttributeDocumenter)
    return {'version': __version__, 'parallel_read_safe': True}


class ModelClassDocumenter(ClassDocumenter):
    """
    This is a specialized Documenter subclass for classes.  It overrides the
    parent class' behavior with special handling for classes that represent
    ORM model tables.
    """
    def get_doc(self, encoding=None, ignore=1):
        # Get the doc as generated by the parent class.
        doc = super().get_doc(encoding=encoding, ignore=ignore)
        # We only care about classes decorated as models.
        if not(hasattr(self.object, IS_MODEL_CLASS) and
               hasattr(self.object, TABLE_META_ATTR)):
            return doc
        # Create an image that we can put in-line with the rest of the
        # docstring.
        img_sub = str(uuid.uuid4()).replace('-', '')
        lines = [[
            f".. |{img_sub}| image:: _static/images/table.svg",
            '    :width: 24px',
            '    :height: 24px',
            '',
            f"|{img_sub}|",
            self.object.__doc__ or '', '',
            f':Table Name: {self.object.__tablename__}', ''
        ]]
        # If the table has a geometry...
        geom_type = self.object.geometry_type()
        if geom_type is not None:
            # ...indicate the geometry type in the document.
            lines[0].extend([
                f':Geometry Type: {self.object.geometry_type()}', ''
            ])
        # Return whatever we have.
        return lines


class ColumnAttributeDocumenter(AttributeDocumenter):
    """
    This is a specialized Documenter subclass for attributes.  It overrides the
    parent class' behavior with special handling for :py:class:`Column`
    attributes.
    """
    def add_content(self, more_content, no_docstring=False):
        # type: (Any, bool) -> None
        # Remember the original no_docstring parameter.
        _no_docstring = no_docstring
        # If this attribute appears to be a Column...
        if (isinstance(self.object, Column)
                and hasattr(self.object, COLUMN_META_ATTR)):
            # ...we really want to document it.
            _no_docstring = False
        elif not self._datadescriptor:
            # if it's not a data descriptor, its docstring is very probably the
            # wrong thing to display
            _no_docstring = True
        ClassLevelDocumenter.add_content(self, more_content, _no_docstring)

    def get_doc(self, encoding=None, ignore=1):
        # type: (unicode, int) -> List[List[unicode]]
        """Decode and return lines of the docstring(s) for the object."""
        # If the current object is a Column and
        if (isinstance(self.object, Column) and
                hasattr(self.object, COLUMN_META_ATTR)):
            # Get the metadata from the column.
            meta = self.object.__meta__


            # Create the doc for the column.
            rst = model_rst_formatter.col2section(meta)




            return[prepare_docstring(rst, 0)]  # don't ignore it!
        else:  # In all other cases, let the parent class do its thing.
            return super().get_doc(encoding=encoding, ignore=ignore)




